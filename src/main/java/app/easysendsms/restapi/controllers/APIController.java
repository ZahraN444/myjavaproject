/*
 * EasySendSMSAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package app.easysendsms.restapi.controllers;

import app.easysendsms.restapi.ApiHelper;
import app.easysendsms.restapi.Server;
import app.easysendsms.restapi.exceptions.ApiException;
import app.easysendsms.restapi.http.request.HttpMethod;
import app.easysendsms.restapi.models.BalanceResponse;
import app.easysendsms.restapi.models.HlrQueryRequest;
import app.easysendsms.restapi.models.HlrQueryResponse;
import app.easysendsms.restapi.models.NvQueryRequest;
import app.easysendsms.restapi.models.NvQueryResponse;
import app.easysendsms.restapi.models.SendSmsRequest;
import app.easysendsms.restapi.models.SendSmsResponse;
import com.fasterxml.jackson.core.JsonProcessingException;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class APIController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public APIController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Send a single SMS message.
     * @param  body  Required parameter: Example:
     * @return    Returns the SendSmsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SendSmsResponse sendSms(
            final SendSmsRequest body) throws ApiException, IOException {
        return prepareSendSmsRequest(body).execute();
    }

    /**
     * Send a single SMS message.
     * @param  body  Required parameter: Example:
     * @return    Returns the SendSmsResponse response from the API call
     */
    public CompletableFuture<SendSmsResponse> sendSmsAsync(
            final SendSmsRequest body) {
        try { 
            return prepareSendSmsRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for sendSms.
     */
    private ApiCall<SendSmsResponse, ApiException> prepareSendSmsRequest(
            final SendSmsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<SendSmsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/rest/sms/send")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("apiKeyAuth"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, SendSmsResponse.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad request",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Unauthorized",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("Too many requests",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal server error",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Retrieve the remaining balance for SMS messages.
     * @return    Returns the BalanceResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public BalanceResponse getSmsBalance() throws ApiException, IOException {
        return prepareGetSmsBalanceRequest().execute();
    }

    /**
     * Retrieve the remaining balance for SMS messages.
     * @return    Returns the BalanceResponse response from the API call
     */
    public CompletableFuture<BalanceResponse> getSmsBalanceAsync() {
        try { 
            return prepareGetSmsBalanceRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getSmsBalance.
     */
    private ApiCall<BalanceResponse, ApiException> prepareGetSmsBalanceRequest() throws IOException {
        return new ApiCall.Builder<BalanceResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/rest/sms/balance")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("apiKeyAuth"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, BalanceResponse.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad request",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Unauthorized",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("Too many requests",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal server error",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Perform an HLR (Home Location Register) query to check the status of a phone number.
     * @param  body  Required parameter: Example:
     * @return    Returns the HlrQueryResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public HlrQueryResponse hlrQuery(
            final HlrQueryRequest body) throws ApiException, IOException {
        return prepareHlrQueryRequest(body).execute();
    }

    /**
     * Perform an HLR (Home Location Register) query to check the status of a phone number.
     * @param  body  Required parameter: Example:
     * @return    Returns the HlrQueryResponse response from the API call
     */
    public CompletableFuture<HlrQueryResponse> hlrQueryAsync(
            final HlrQueryRequest body) {
        try { 
            return prepareHlrQueryRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for hlrQuery.
     */
    private ApiCall<HlrQueryResponse, ApiException> prepareHlrQueryRequest(
            final HlrQueryRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<HlrQueryResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/rest/hlr/query")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("apiKeyAuth"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, HlrQueryResponse.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad request",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Unauthorized",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("Too many requests",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal server error",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Perform a Number Validation (NV) query to validate a phone number.
     * @param  body  Required parameter: Example:
     * @return    Returns the NvQueryResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public NvQueryResponse nvQuery(
            final NvQueryRequest body) throws ApiException, IOException {
        return prepareNvQueryRequest(body).execute();
    }

    /**
     * Perform a Number Validation (NV) query to validate a phone number.
     * @param  body  Required parameter: Example:
     * @return    Returns the NvQueryResponse response from the API call
     */
    public CompletableFuture<NvQueryResponse> nvQueryAsync(
            final NvQueryRequest body) {
        try { 
            return prepareNvQueryRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for nvQuery.
     */
    private ApiCall<NvQueryResponse, ApiException> prepareNvQueryRequest(
            final NvQueryRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<NvQueryResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/rest/nv/query")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("apiKeyAuth"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, NvQueryResponse.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad request",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Unauthorized",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("Too many requests",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal server error",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}